{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7021,"sourceType":"datasetVersion","datasetId":2283},{"sourceId":7379728,"sourceType":"datasetVersion","datasetId":4288616}],"dockerImageVersionId":30635,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Conteúdo da aula","metadata":{"id":"IE_U7vSQZ22k"}},{"cell_type":"code","source":"\"\"\"\nPandas é uma biblioteca para leitura de fontes de dados do Python;\nEsta base de dados possui registros de acesso a um site, com uma coluna\nindicando se um usuário realizou uma compra ou não.\n\"\"\"\nimport pandas as pd\n\ndados = pd.read_csv('/kaggle/input/alura-registros-de-acesso-site-compras/tracking.csv')\ndados.head()","metadata":{"id":"mEIOC06i7QEJ","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"4c0abfd6-e773-4f91-9a21-de86a01c696c","execution":{"iopub.status.busy":"2024-01-10T23:17:35.159903Z","iopub.execute_input":"2024-01-10T23:17:35.160621Z","iopub.status.idle":"2024-01-10T23:17:35.671990Z","shell.execute_reply.started":"2024-01-10T23:17:35.160575Z","shell.execute_reply":"2024-01-10T23:17:35.670438Z"},"trusted":true},"execution_count":1,"outputs":[{"execution_count":1,"output_type":"execute_result","data":{"text/plain":"   home  how_it_works  contact  bought\n0     1             1        0       0\n1     1             1        0       0\n2     1             1        0       0\n3     1             1        0       0\n4     1             1        0       0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>home</th>\n      <th>how_it_works</th>\n      <th>contact</th>\n      <th>bought</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"\"\"\"\nRenomeando as colunas para o português para trabalhar melhor com elas.\n\"\"\"\n\ndados = dados.rename(columns = {\n    'home' : 'principal',\n    'how_it_works' : 'como_funciona',\n    'contact' : 'contato',\n    'bought' : 'comprou',\n})","metadata":{"id":"uDu0eTJn7x0D","execution":{"iopub.status.busy":"2024-01-10T23:17:47.118935Z","iopub.execute_input":"2024-01-10T23:17:47.119350Z","iopub.status.idle":"2024-01-10T23:17:47.126697Z","shell.execute_reply.started":"2024-01-10T23:17:47.119300Z","shell.execute_reply":"2024-01-10T23:17:47.125172Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"\"\"\"\n.shape analisa as dimensões da fonte de dados.\n99 linhas e 4 colunas.\n\"\"\"\n\ndados.shape","metadata":{"id":"X5pZ6xcZ8fYq","colab":{"base_uri":"https://localhost:8080/"},"outputId":"644fc188-d7d3-497b-9b75-c19fbbd08a98","execution":{"iopub.status.busy":"2024-01-10T23:18:00.677827Z","iopub.execute_input":"2024-01-10T23:18:00.678290Z","iopub.status.idle":"2024-01-10T23:18:00.687408Z","shell.execute_reply.started":"2024-01-10T23:18:00.678252Z","shell.execute_reply":"2024-01-10T23:18:00.686002Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"(99, 4)"},"metadata":{}}]},{"cell_type":"code","source":"\"\"\"\nNosso X será baseado no acesso as páginas.\n\"\"\"\n\nx = dados[[\"principal\",\"como_funciona\",\"contato\"]]\nx.head()","metadata":{"id":"9En1V0PM7e8V","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"78593c37-e647-4b9f-8f48-88c53a2f254e","execution":{"iopub.status.busy":"2024-01-10T23:18:05.871199Z","iopub.execute_input":"2024-01-10T23:18:05.871698Z","iopub.status.idle":"2024-01-10T23:18:05.899208Z","shell.execute_reply.started":"2024-01-10T23:18:05.871659Z","shell.execute_reply":"2024-01-10T23:18:05.897708Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   principal  como_funciona  contato\n0          1              1        0\n1          1              1        0\n2          1              1        0\n3          1              1        0\n4          1              1        0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>principal</th>\n      <th>como_funciona</th>\n      <th>contato</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"\"\"\"\nNosso Y ficará com a realização da compra.\n\"\"\"\n\ny = dados[\"comprou\"]\ny.head()","metadata":{"id":"qDr2YoWu8O3O","colab":{"base_uri":"https://localhost:8080/"},"outputId":"dc90a529-8681-4de6-fd8c-976bab6f749a","execution":{"iopub.status.busy":"2024-01-10T23:18:08.536417Z","iopub.execute_input":"2024-01-10T23:18:08.536808Z","iopub.status.idle":"2024-01-10T23:18:08.546655Z","shell.execute_reply.started":"2024-01-10T23:18:08.536769Z","shell.execute_reply":"2024-01-10T23:18:08.544940Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"0    0\n1    0\n2    0\n3    0\n4    0\nName: comprou, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"\"\"\"\nRealizamos um corte para determinar quais será a proposção de treino e teste.\nNo corte realizado, 75 linhas para treino e 24 para teste.\n\"\"\"\n\ntreino_x = x[:75]\ntreino_y = y[:75]\nteste_x = x[75:]\nteste_y = y[75:]\n\nprint(\n    \"Treinaremos com %d elementos e testaremos com %d elementos\"\n    % (len(treino_x), len(teste_x))\n)","metadata":{"id":"TLZ9eTvP9U9q","colab":{"base_uri":"https://localhost:8080/"},"outputId":"c83e3f4e-1c16-41c9-a217-d45536742fc9","execution":{"iopub.status.busy":"2024-01-10T23:18:13.079034Z","iopub.execute_input":"2024-01-10T23:18:13.079470Z","iopub.status.idle":"2024-01-10T23:18:13.087755Z","shell.execute_reply.started":"2024-01-10T23:18:13.079438Z","shell.execute_reply":"2024-01-10T23:18:13.086417Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"Treinaremos com 75 elementos e testaremos com 24 elementos\n","output_type":"stream"}]},{"cell_type":"code","source":"\"\"\"\nO modelo registrou uma acurácia de 95.83%, o que não é nada mal!\n\"\"\"\n\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import accuracy_score\n\nmodelo = LinearSVC()\nmodelo.fit(treino_x, treino_y)\nprevisoes = modelo.predict(teste_x)\n\nacuracia = accuracy_score(teste_y, previsoes) * 100\nprint(\"A acurácia foi %.2f%%\" % acuracia)","metadata":{"id":"pZZjbQxh9jn8","colab":{"base_uri":"https://localhost:8080/"},"outputId":"b769131a-f0eb-4f6a-9ce2-39889f15da69","execution":{"iopub.status.busy":"2024-01-10T23:18:15.613985Z","iopub.execute_input":"2024-01-10T23:18:15.614453Z","iopub.status.idle":"2024-01-10T23:18:16.569721Z","shell.execute_reply.started":"2024-01-10T23:18:15.614420Z","shell.execute_reply":"2024-01-10T23:18:16.568483Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"A acurácia foi 95.83%\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Usando a biblioteca para separar treino e teste","metadata":{"id":"2iVcuGkyA5tK"}},{"cell_type":"code","source":"\"\"\"\nNão é preciso fazer este corte na mão;\nA biblioteca sklearn possui a função train_test_split, que já faz o corte\ndas bases X e Y para treino e teste, de acordo com a proporção fornecida;\nNo caso o corte feito muda para 74 linhas para treino e 25 para teste.\n\"\"\"\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import accuracy_score\n\ntreino_x, teste_x, treino_y, teste_y = train_test_split(\n    x, y, test_size = 0.25\n)\nprint(\n    \"Treinaremos com %d elementos e testaremos com %d elementos\"\n    % (len(treino_x), len(teste_x))\n)\n\nmodelo = LinearSVC()\nmodelo.fit(treino_x, treino_y)\nprevisoes = modelo.predict(teste_x)\n\nacuracia = accuracy_score(teste_y, previsoes) * 100\nprint(\"A acurácia foi %.2f%%\" % acuracia)","metadata":{"id":"rA-z0_a6-CM1","colab":{"base_uri":"https://localhost:8080/"},"outputId":"ef45e10f-4493-43dc-f656-6624f3eae729","execution":{"iopub.status.busy":"2024-01-10T23:18:49.345032Z","iopub.execute_input":"2024-01-10T23:18:49.345576Z","iopub.status.idle":"2024-01-10T23:18:49.366011Z","shell.execute_reply.started":"2024-01-10T23:18:49.345534Z","shell.execute_reply":"2024-01-10T23:18:49.364599Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"Treinaremos com 74 elementos e testaremos com 25 elementos\nA acurácia foi 96.00%\n","output_type":"stream"}]},{"cell_type":"code","source":"treino_y.value_counts()","metadata":{"id":"JWFKlQccAk1F","colab":{"base_uri":"https://localhost:8080/"},"outputId":"aeca0c13-eaa8-4432-c371-e0fbeb766923","execution":{"iopub.status.busy":"2024-01-10T23:19:00.811502Z","iopub.execute_input":"2024-01-10T23:19:00.811897Z","iopub.status.idle":"2024-01-10T23:19:00.821248Z","shell.execute_reply.started":"2024-01-10T23:19:00.811867Z","shell.execute_reply":"2024-01-10T23:19:00.820133Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"comprou\n0    51\n1    23\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"teste_y.value_counts()","metadata":{"id":"fdORezxWBcwX","colab":{"base_uri":"https://localhost:8080/"},"outputId":"23a1b336-5b60-4709-ab2a-d753a3aa0961","execution":{"iopub.status.busy":"2024-01-10T23:18:58.995930Z","iopub.execute_input":"2024-01-10T23:18:58.996399Z","iopub.status.idle":"2024-01-10T23:18:59.006556Z","shell.execute_reply.started":"2024-01-10T23:18:58.996363Z","shell.execute_reply":"2024-01-10T23:18:59.005408Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"comprou\n0    15\n1    10\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"\"\"\"\nNa análise feita anteriormente, a base de teste ficou com 2/3 de resultados positivos;\nIsso pode ser um pouco arriscado, especialmente com proporções maiores de um valor só;\nPara evitar isso, a função train_test_split recebe um parâmetro stratify, que recebe\no nosso Y e faz o corte mantendo as proporções mais próximas possíveis entre teste e\ntreino.\n\"\"\"\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import accuracy_score\n\ntreino_x, teste_x, treino_y, teste_y = train_test_split(\n    x, y, test_size = 0.25, stratify = y\n)\nprint(\n    \"Treinaremos com %d elementos e testaremos com %d elementos\"\n    % (len(treino_x), len(teste_x))\n)\n\nmodelo = LinearSVC()\nmodelo.fit(treino_x, treino_y)\nprevisoes = modelo.predict(teste_x)\n\nacuracia = accuracy_score(teste_y, previsoes) * 100\nprint(\"A acurácia foi %.2f%%\" % acuracia)","metadata":{"id":"k_kFDoBABh4B","colab":{"base_uri":"https://localhost:8080/"},"outputId":"9f270d51-9f3d-4c7a-b181-0b83ecd87af3","execution":{"iopub.status.busy":"2024-01-10T23:22:40.452831Z","iopub.execute_input":"2024-01-10T23:22:40.453384Z","iopub.status.idle":"2024-01-10T23:22:40.472849Z","shell.execute_reply.started":"2024-01-10T23:22:40.453316Z","shell.execute_reply":"2024-01-10T23:22:40.471150Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"Treinaremos com 74 elementos e testaremos com 25 elementos\nA acurácia foi 92.00%\n","output_type":"stream"}]},{"cell_type":"code","source":"treino_y.value_counts()","metadata":{"id":"SS4n0CVXB6Fo","colab":{"base_uri":"https://localhost:8080/"},"outputId":"388c4ac8-7f45-48fe-dd7d-f03f9e77ed45","execution":{"iopub.status.busy":"2024-01-10T23:22:54.479309Z","iopub.execute_input":"2024-01-10T23:22:54.479753Z","iopub.status.idle":"2024-01-10T23:22:54.489751Z","shell.execute_reply.started":"2024-01-10T23:22:54.479718Z","shell.execute_reply":"2024-01-10T23:22:54.488403Z"},"trusted":true},"execution_count":23,"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"comprou\n0    49\n1    25\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"teste_y.value_counts()","metadata":{"id":"hgvSvos6CHIk","colab":{"base_uri":"https://localhost:8080/"},"outputId":"9d551afa-cc24-49be-d1f1-34738f8005b1","execution":{"iopub.status.busy":"2024-01-10T23:23:01.071919Z","iopub.execute_input":"2024-01-10T23:23:01.072499Z","iopub.status.idle":"2024-01-10T23:23:01.084468Z","shell.execute_reply.started":"2024-01-10T23:23:01.072458Z","shell.execute_reply":"2024-01-10T23:23:01.082783Z"},"trusted":true},"execution_count":24,"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"comprou\n0    17\n1     8\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"# Treino para fixação","metadata":{"id":"SQgvB7xDbP4Q"}},{"cell_type":"code","source":"\"\"\"\nNeste treino irei explorar uma base de voos e tentar criar um modelo\nde predição para saber quais deles serão cancelados ou realizados.\n\"\"\"\nimport pandas as pd\n\ndados = pd.read_csv('/kaggle/input/flights-in-brazil/BrFlights2.csv', encoding='ISO-8859-1')\ndados.head()","metadata":{"id":"SYIkKR-Nk5Sa","execution":{"iopub.status.busy":"2024-01-11T21:12:19.493771Z","iopub.execute_input":"2024-01-11T21:12:19.494242Z","iopub.status.idle":"2024-01-11T21:12:42.458799Z","shell.execute_reply.started":"2024-01-11T21:12:19.494211Z","shell.execute_reply":"2024-01-11T21:12:42.457223Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"        Voos        Companhia.Aerea Codigo.Tipo.Linha      Partida.Prevista  \\\n0  AAL - 203  AMERICAN AIRLINES INC     Internacional  2016-01-30T08:58:00Z   \n1  AAL - 203  AMERICAN AIRLINES INC     Internacional  2016-01-13T12:13:00Z   \n2  AAL - 203  AMERICAN AIRLINES INC     Internacional  2016-01-29T12:13:00Z   \n3  AAL - 203  AMERICAN AIRLINES INC     Internacional  2016-01-19T12:13:00Z   \n4  AAL - 203  AMERICAN AIRLINES INC     Internacional  2016-01-30T12:13:00Z   \n\n           Partida.Real      Chegada.Prevista          Chegada.Real  \\\n0  2016-01-30T08:58:00Z  2016-01-30T10:35:00Z  2016-01-30T10:35:00Z   \n1  2016-01-13T12:13:00Z  2016-01-13T21:30:00Z  2016-01-13T21:30:00Z   \n2  2016-01-29T12:13:00Z  2016-01-29T21:30:00Z  2016-01-29T21:30:00Z   \n3  2016-01-18T12:03:00Z  2016-01-19T21:30:00Z  2016-01-18T20:41:00Z   \n4  2016-01-30T12:13:00Z  2016-01-30T21:30:00Z  2016-01-30T21:30:00Z   \n\n  Situacao.Voo                       Codigo.Justificativa Aeroporto.Origem  \\\n0    Realizado                                        NaN      Afonso Pena   \n1    Realizado                                        NaN    Salgado Filho   \n2    Realizado                                        NaN    Salgado Filho   \n3    Realizado  LIBERACAO SERV. TRAFEGO AEREO/ANTECIPACAO    Salgado Filho   \n4    Realizado                                        NaN    Salgado Filho   \n\n   ... Estado.Origem Pais.Origem Aeroporto.Destino Cidade.Destino  \\\n0  ...            PR      Brasil     Salgado Filho   Porto Alegre   \n1  ...            RS      Brasil             Miami          Miami   \n2  ...            RS      Brasil             Miami          Miami   \n3  ...            RS      Brasil             Miami          Miami   \n4  ...            RS      Brasil             Miami          Miami   \n\n  Estado.Destino    Pais.Destino   LongDest    LatDest   LongOrig    LatOrig  \n0             RS          Brasil -51.175381 -29.993473 -49.172481 -25.532713  \n1            N/I  Estados Unidos -80.287046  25.795865 -51.175381 -29.993473  \n2            N/I  Estados Unidos -80.287046  25.795865 -51.175381 -29.993473  \n3            N/I  Estados Unidos -80.287046  25.795865 -51.175381 -29.993473  \n4            N/I  Estados Unidos -80.287046  25.795865 -51.175381 -29.993473  \n\n[5 rows x 21 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Voos</th>\n      <th>Companhia.Aerea</th>\n      <th>Codigo.Tipo.Linha</th>\n      <th>Partida.Prevista</th>\n      <th>Partida.Real</th>\n      <th>Chegada.Prevista</th>\n      <th>Chegada.Real</th>\n      <th>Situacao.Voo</th>\n      <th>Codigo.Justificativa</th>\n      <th>Aeroporto.Origem</th>\n      <th>...</th>\n      <th>Estado.Origem</th>\n      <th>Pais.Origem</th>\n      <th>Aeroporto.Destino</th>\n      <th>Cidade.Destino</th>\n      <th>Estado.Destino</th>\n      <th>Pais.Destino</th>\n      <th>LongDest</th>\n      <th>LatDest</th>\n      <th>LongOrig</th>\n      <th>LatOrig</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AAL - 203</td>\n      <td>AMERICAN AIRLINES INC</td>\n      <td>Internacional</td>\n      <td>2016-01-30T08:58:00Z</td>\n      <td>2016-01-30T08:58:00Z</td>\n      <td>2016-01-30T10:35:00Z</td>\n      <td>2016-01-30T10:35:00Z</td>\n      <td>Realizado</td>\n      <td>NaN</td>\n      <td>Afonso Pena</td>\n      <td>...</td>\n      <td>PR</td>\n      <td>Brasil</td>\n      <td>Salgado Filho</td>\n      <td>Porto Alegre</td>\n      <td>RS</td>\n      <td>Brasil</td>\n      <td>-51.175381</td>\n      <td>-29.993473</td>\n      <td>-49.172481</td>\n      <td>-25.532713</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>AAL - 203</td>\n      <td>AMERICAN AIRLINES INC</td>\n      <td>Internacional</td>\n      <td>2016-01-13T12:13:00Z</td>\n      <td>2016-01-13T12:13:00Z</td>\n      <td>2016-01-13T21:30:00Z</td>\n      <td>2016-01-13T21:30:00Z</td>\n      <td>Realizado</td>\n      <td>NaN</td>\n      <td>Salgado Filho</td>\n      <td>...</td>\n      <td>RS</td>\n      <td>Brasil</td>\n      <td>Miami</td>\n      <td>Miami</td>\n      <td>N/I</td>\n      <td>Estados Unidos</td>\n      <td>-80.287046</td>\n      <td>25.795865</td>\n      <td>-51.175381</td>\n      <td>-29.993473</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>AAL - 203</td>\n      <td>AMERICAN AIRLINES INC</td>\n      <td>Internacional</td>\n      <td>2016-01-29T12:13:00Z</td>\n      <td>2016-01-29T12:13:00Z</td>\n      <td>2016-01-29T21:30:00Z</td>\n      <td>2016-01-29T21:30:00Z</td>\n      <td>Realizado</td>\n      <td>NaN</td>\n      <td>Salgado Filho</td>\n      <td>...</td>\n      <td>RS</td>\n      <td>Brasil</td>\n      <td>Miami</td>\n      <td>Miami</td>\n      <td>N/I</td>\n      <td>Estados Unidos</td>\n      <td>-80.287046</td>\n      <td>25.795865</td>\n      <td>-51.175381</td>\n      <td>-29.993473</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>AAL - 203</td>\n      <td>AMERICAN AIRLINES INC</td>\n      <td>Internacional</td>\n      <td>2016-01-19T12:13:00Z</td>\n      <td>2016-01-18T12:03:00Z</td>\n      <td>2016-01-19T21:30:00Z</td>\n      <td>2016-01-18T20:41:00Z</td>\n      <td>Realizado</td>\n      <td>LIBERACAO SERV. TRAFEGO AEREO/ANTECIPACAO</td>\n      <td>Salgado Filho</td>\n      <td>...</td>\n      <td>RS</td>\n      <td>Brasil</td>\n      <td>Miami</td>\n      <td>Miami</td>\n      <td>N/I</td>\n      <td>Estados Unidos</td>\n      <td>-80.287046</td>\n      <td>25.795865</td>\n      <td>-51.175381</td>\n      <td>-29.993473</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>AAL - 203</td>\n      <td>AMERICAN AIRLINES INC</td>\n      <td>Internacional</td>\n      <td>2016-01-30T12:13:00Z</td>\n      <td>2016-01-30T12:13:00Z</td>\n      <td>2016-01-30T21:30:00Z</td>\n      <td>2016-01-30T21:30:00Z</td>\n      <td>Realizado</td>\n      <td>NaN</td>\n      <td>Salgado Filho</td>\n      <td>...</td>\n      <td>RS</td>\n      <td>Brasil</td>\n      <td>Miami</td>\n      <td>Miami</td>\n      <td>N/I</td>\n      <td>Estados Unidos</td>\n      <td>-80.287046</td>\n      <td>25.795865</td>\n      <td>-51.175381</td>\n      <td>-29.993473</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 21 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"\"\"\"\nSanitizando o dataframe, removendo colunas que não serão\nutilizadas no modelo de predição e renomeando as outras;\n\"\"\"\ndados = dados.drop([\n    'Voos',\n    'Companhia.Aerea',\n    'Partida.Real',\n    'Chegada.Real',\n    'Codigo.Justificativa',\n    'Estado.Origem',\n    'Pais.Origem',\n    'Estado.Destino',\n    'Aeroporto.Origem',\n    'Aeroporto.Destino',\n    'Cidade.Origem',\n    'Cidade.Destino',\n    'Pais.Destino',\n    'LongDest',\n    'LatDest',\n    'LongOrig',\n    'LatOrig',\n], axis=1)\n\ndados = dados.rename(columns = {\n    'Codigo.Tipo.Linha': 'tipo_linha',\n    'Partida.Prevista': 'prev_partida',\n    'Chegada.Prevista': 'prev_chegada',\n    'Situacao.Voo': 'situacao',\n})\n\ndados.head()","metadata":{"id":"vTAxesGNbTjZ","execution":{"iopub.status.busy":"2024-01-11T17:46:52.360421Z","iopub.execute_input":"2024-01-11T17:46:52.361504Z","iopub.status.idle":"2024-01-11T17:46:52.659926Z","shell.execute_reply.started":"2024-01-11T17:46:52.361459Z","shell.execute_reply":"2024-01-11T17:46:52.658797Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"      tipo_linha          prev_partida          prev_chegada   situacao\n0  Internacional  2016-01-30T08:58:00Z  2016-01-30T10:35:00Z  Realizado\n1  Internacional  2016-01-13T12:13:00Z  2016-01-13T21:30:00Z  Realizado\n2  Internacional  2016-01-29T12:13:00Z  2016-01-29T21:30:00Z  Realizado\n3  Internacional  2016-01-19T12:13:00Z  2016-01-19T21:30:00Z  Realizado\n4  Internacional  2016-01-30T12:13:00Z  2016-01-30T21:30:00Z  Realizado","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>tipo_linha</th>\n      <th>prev_partida</th>\n      <th>prev_chegada</th>\n      <th>situacao</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Internacional</td>\n      <td>2016-01-30T08:58:00Z</td>\n      <td>2016-01-30T10:35:00Z</td>\n      <td>Realizado</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Internacional</td>\n      <td>2016-01-13T12:13:00Z</td>\n      <td>2016-01-13T21:30:00Z</td>\n      <td>Realizado</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Internacional</td>\n      <td>2016-01-29T12:13:00Z</td>\n      <td>2016-01-29T21:30:00Z</td>\n      <td>Realizado</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Internacional</td>\n      <td>2016-01-19T12:13:00Z</td>\n      <td>2016-01-19T21:30:00Z</td>\n      <td>Realizado</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Internacional</td>\n      <td>2016-01-30T12:13:00Z</td>\n      <td>2016-01-30T21:30:00Z</td>\n      <td>Realizado</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"\"\"\"\nCriando uma coluna com a estimativa de duração do voo (em minutos)\ne descartando as colunas de previsão de partida e chegada\n\"\"\"\n\n# Precisei de ajuda do Chat GPT nessa\n# https://chat.openai.com/share/3ff74705-972c-4b12-8768-8b472cc34524\n\ndados['prev_partida'] = pd.to_datetime(dados['prev_partida'])\ndados['prev_chegada'] = pd.to_datetime(dados['prev_chegada'])\n\ndados['estimativa_voo'] = (dados['prev_chegada'] - dados['prev_partida']).dt.total_seconds() / 60\ndados['estimativa_voo'] = dados['estimativa_voo'].astype(int)\n\ndados = dados.drop(['prev_partida', 'prev_chegada'], axis=1)\ndados.head()","metadata":{"execution":{"iopub.status.busy":"2024-01-11T17:46:57.998219Z","iopub.execute_input":"2024-01-11T17:46:57.998598Z","iopub.status.idle":"2024-01-11T17:47:23.918949Z","shell.execute_reply.started":"2024-01-11T17:46:57.998556Z","shell.execute_reply":"2024-01-11T17:47:23.917894Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"      tipo_linha   situacao  estimativa_voo\n0  Internacional  Realizado              97\n1  Internacional  Realizado             557\n2  Internacional  Realizado             557\n3  Internacional  Realizado             557\n4  Internacional  Realizado             557","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>tipo_linha</th>\n      <th>situacao</th>\n      <th>estimativa_voo</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Internacional</td>\n      <td>Realizado</td>\n      <td>97</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Internacional</td>\n      <td>Realizado</td>\n      <td>557</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Internacional</td>\n      <td>Realizado</td>\n      <td>557</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Internacional</td>\n      <td>Realizado</td>\n      <td>557</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Internacional</td>\n      <td>Realizado</td>\n      <td>557</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"dados.tipo_linha.value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-01-11T17:47:29.196056Z","iopub.execute_input":"2024-01-11T17:47:29.196452Z","iopub.status.idle":"2024-01-11T17:47:29.406227Z","shell.execute_reply.started":"2024-01-11T17:47:29.196422Z","shell.execute_reply":"2024-01-11T17:47:29.405174Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"tipo_linha\nNacional         1780319\nRegional          441240\nInternacional     320960\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"\"\"\"\nFormatando as colunas tipo_linha e situacao para valores numéricos:\ntipo_linha: Regional: 0, Nacional: 1, Internacional: 2\nsituacao: Cancelado: 0, Realizado: 1\n\"\"\"\ndados.tipo_linha = dados.tipo_linha.map({\n    'Regional': 0,\n    'Nacional': 1,\n    'Internacional': 2,\n})\n\ndados.situacao = dados.situacao.map({\n    'Cancelado': 0,\n    'Realizado': 1,\n})\n\ndados.head()","metadata":{"execution":{"iopub.status.busy":"2024-01-11T17:47:31.449625Z","iopub.execute_input":"2024-01-11T17:47:31.450220Z","iopub.status.idle":"2024-01-11T17:47:31.770362Z","shell.execute_reply.started":"2024-01-11T17:47:31.450184Z","shell.execute_reply":"2024-01-11T17:47:31.769309Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   tipo_linha  situacao  estimativa_voo\n0           2         1              97\n1           2         1             557\n2           2         1             557\n3           2         1             557\n4           2         1             557","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>tipo_linha</th>\n      <th>situacao</th>\n      <th>estimativa_voo</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>1</td>\n      <td>97</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>557</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>1</td>\n      <td>557</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>1</td>\n      <td>557</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>1</td>\n      <td>557</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"x = dados[['tipo_linha', 'estimativa_voo']]\ny = dados['situacao']","metadata":{"execution":{"iopub.status.busy":"2024-01-11T17:47:35.655465Z","iopub.execute_input":"2024-01-11T17:47:35.655857Z","iopub.status.idle":"2024-01-11T17:47:35.678066Z","shell.execute_reply.started":"2024-01-11T17:47:35.655825Z","shell.execute_reply":"2024-01-11T17:47:35.676690Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"\"\"\"\nFazendo o corte com train_test_split (parece que vai dar bom!!)\nCortei bastante por questões de desempenho\n\"\"\"\n\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\n\nSEED = 5\nnp.random.seed(SEED)\n\ntreino_x, teste_x, treino_y, teste_y = train_test_split(\n    x, y, train_size=0.010, test_size=0.0025, stratify=y\n)\n\ntreino_x.shape","metadata":{"execution":{"iopub.status.busy":"2024-01-11T17:52:35.327990Z","iopub.execute_input":"2024-01-11T17:52:35.329178Z","iopub.status.idle":"2024-01-11T17:52:35.694725Z","shell.execute_reply.started":"2024-01-11T17:52:35.329132Z","shell.execute_reply":"2024-01-11T17:52:35.693573Z"},"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"(25425, 2)"},"metadata":{}}]},{"cell_type":"code","source":"treino_y.value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-01-11T17:52:38.802633Z","iopub.execute_input":"2024-01-11T17:52:38.803050Z","iopub.status.idle":"2024-01-11T17:52:38.811841Z","shell.execute_reply.started":"2024-01-11T17:52:38.803015Z","shell.execute_reply":"2024-01-11T17:52:38.810556Z"},"trusted":true},"execution_count":23,"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"situacao\n1    22533\n0     2892\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"\"\"\"\nO modelo não convergiu, acredito que tenha sido por isso que tive uma acurácia na faixa dos 85%.\nValeu a tentativa. Aprendi coisas novas.\n\"\"\"\n\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import accuracy_score\nimport numpy as np\n\nSEED = 5\nnp.random.seed(SEED)\n\nmodel = LinearSVC(random_state = 0, max_iter=1000)\nmodel.fit(treino_x, treino_y)\nprevisoes = model.predict(teste_x)\n\nacuracia = accuracy_score(teste_y, previsoes) * 100\nprint('Acurácia do modelo: %.2f%%' % acuracia)","metadata":{"execution":{"iopub.status.busy":"2024-01-11T21:12:06.878803Z","iopub.execute_input":"2024-01-11T21:12:06.879302Z","iopub.status.idle":"2024-01-11T21:12:08.262889Z","shell.execute_reply.started":"2024-01-11T21:12:06.879266Z","shell.execute_reply":"2024-01-11T21:12:08.261205Z"},"trusted":true},"execution_count":1,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[1], line 9\u001b[0m\n\u001b[1;32m      6\u001b[0m np\u001b[38;5;241m.\u001b[39mrandom\u001b[38;5;241m.\u001b[39mseed(SEED)\n\u001b[1;32m      8\u001b[0m model \u001b[38;5;241m=\u001b[39m LinearSVC(random_state \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m, max_iter\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1000\u001b[39m)\n\u001b[0;32m----> 9\u001b[0m model\u001b[38;5;241m.\u001b[39mfit(\u001b[43mtreino_x\u001b[49m, treino_y)\n\u001b[1;32m     10\u001b[0m previsoes \u001b[38;5;241m=\u001b[39m model\u001b[38;5;241m.\u001b[39mpredict(teste_x)\n\u001b[1;32m     12\u001b[0m acuracia \u001b[38;5;241m=\u001b[39m accuracy_score(teste_y, previsoes) \u001b[38;5;241m*\u001b[39m \u001b[38;5;241m100\u001b[39m\n","\u001b[0;31mNameError\u001b[0m: name 'treino_x' is not defined"],"ename":"NameError","evalue":"name 'treino_x' is not defined","output_type":"error"}]}]}