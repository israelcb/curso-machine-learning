{"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30635,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install graphviz==0.10\n!apt-get install graphviz","metadata":{"id":"T3ywJhRBMGvY","colab":{"base_uri":"https://localhost:8080/"},"outputId":"d76558f3-6a83-40f6-fde6-a94a2c366838","execution":{"iopub.status.busy":"2024-01-10T23:03:55.873451Z","iopub.execute_input":"2024-01-10T23:03:55.873861Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"\u001b[33mWARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<pip._vendor.urllib3.connection.HTTPSConnection object at 0x7d78eb5f8ac0>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution')': /simple/graphviz/\u001b[0m\u001b[33m\n\u001b[0m","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\n\nuri = 'https://gist.githubusercontent.com'\nuri += '/guilhermesilveira/4d1d4a16ccbf6ea4e0a64a38a24ec884'\nuri += '/raw/afd05cb0c796d18f3f5a6537053ded308ba94bf7'\nuri += '/car-prices.csv'\ndados = pd.read_csv(uri)\ndados.head()","metadata":{"id":"y7ik04NlDZMA","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"e4eb8868-5aa4-4ae3-8360-eff0558cadd1","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"a_renomear = {\n    'mileage_per_year' : 'milhas_por_ano',\n    'model_year' : 'ano_do_modelo',\n    'price' : 'preco',\n    'sold' : 'vendido'\n}\ndados = dados.rename(columns=a_renomear)\ndados.head()","metadata":{"id":"FqFrPmgJDhvM","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"eafb8c64-17ef-49bf-cdc3-797e9b6cb4d0","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"a_trocar = {\n    'no' : 0,\n    'yes' : 1\n}\ndados.vendido = dados.vendido.map(a_trocar)\ndados.head()","metadata":{"id":"J31fUGbVEKpW","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"5fbfdca8-4d70-4923-c257-1723e3a9bf3a","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from datetime import datetime\n\nano_atual = datetime.today().year\ndados['idade_do_modelo'] = ano_atual - dados.ano_do_modelo\ndados.head()","metadata":{"id":"tZFog8O9EXYD","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"76c09f19-2775-4ca7-a824-d6a719220a0c","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"dados['km_por_ano'] = dados.milhas_por_ano * 1.60934\ndados.head()","metadata":{"id":"3wWWgxhcFbR9","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"3d238876-9cd9-411e-b6bd-ef796aa92424","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"dados = dados.drop(columns = [\"Unnamed: 0\", \"milhas_por_ano\",\"ano_do_modelo\"], axis=1)\ndados.head()","metadata":{"id":"MfjQNKlyFo2S","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"73df67fe-afec-4256-914f-7e474adaf64f","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import accuracy_score\n\nx = dados[[\"preco\", \"idade_do_modelo\",\"km_por_ano\"]]\ny = dados[\"vendido\"]\n\nSEED = 5\nnp.random.seed(SEED)\ntreino_x, teste_x, treino_y, teste_y = train_test_split(x, y, test_size = 0.25,\n                                                         stratify = y)\nprint(\"Treinaremos com %d elementos e testaremos com %d elementos\" % (len(treino_x), len(teste_x)))\n\nmodelo = LinearSVC()\nmodelo.fit(treino_x, treino_y)\nprevisoes = modelo.predict(teste_x)\n\nacuracia = accuracy_score(teste_y, previsoes) * 100\nprint(\"A acurácia foi %.2f%%\" % acuracia)","metadata":{"id":"E3xebM4FF0Tc","colab":{"base_uri":"https://localhost:8080/"},"outputId":"967a80bc-91a4-4069-f67f-d6625caa36c7","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.dummy import DummyClassifier\n\ndummy_stratified = DummyClassifier()\ndummy_stratified.fit(treino_x, treino_y)\nacuracia = dummy_stratified.score(teste_x, teste_y) * 100\n\nprint(\"A acurácia do dummy stratified foi %.2f%%\" % acuracia)","metadata":{"id":"G2ZFWoPkGONL","colab":{"base_uri":"https://localhost:8080/"},"outputId":"80ca14c6-bc72-4031-fafc-6c369272ec58","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.dummy import DummyClassifier\n\ndummy_mostfrequent = DummyClassifier()\ndummy_mostfrequent.fit(treino_x, treino_y)\nacuracia = dummy_mostfrequent.score(teste_x, teste_y) * 100\n\nprint(\"A acurácia do dummy mostfrequent foi %.2f%%\" % acuracia)","metadata":{"id":"469ZKbHJIHL0","colab":{"base_uri":"https://localhost:8080/"},"outputId":"245175d6-7b6b-4d4d-d28e-15c60e167c5e","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\n\nSEED = 5\nnp.random.seed(SEED)\nraw_treino_x, raw_teste_x, treino_y, teste_y = train_test_split(x, y, test_size = 0.25,\n                                                         stratify = y)\nprint(\"Treinaremos com %d elementos e testaremos com %d elementos\" % (len(treino_x), len(teste_x)))\n\nscaler = StandardScaler()\nscaler.fit(raw_treino_x)\ntreino_x = scaler.transform(raw_treino_x)\nteste_x = scaler.transform(raw_teste_x)\n\nmodelo = SVC()\nmodelo.fit(treino_x, treino_y)\nprevisoes = modelo.predict(teste_x)\n\nacuracia = accuracy_score(teste_y, previsoes) * 100\nprint(\"A acurácia foi %.2f%%\" % acuracia)","metadata":{"id":"S_5AfFerIsH_","colab":{"base_uri":"https://localhost:8080/"},"outputId":"b51b1976-de0b-4b19-c06d-2cb6c7411a38","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nimport numpy as np\n\nSEED = 5\nnp.random.seed(SEED)\nraw_treino_x, raw_teste_x, treino_y, teste_y = train_test_split(\n    x, y, test_size = 0.25, stratify = y\n)\nprint(\n    'Treinaremos com %d elementos e testaremos com %d elementos'\n    % (len(raw_treino_x), len(raw_teste_x))\n)\n\nmodelo = DecisionTreeClassifier(max_depth = 3)\nmodelo.fit(raw_treino_x, treino_y)\nprevisoes = modelo.predict(raw_teste_x)\n\nacuracia = accuracy_score(teste_y, previsoes) * 100\nprint(\"A acurácia foi %.2f%%\" % acuracia)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Yo4ZeaWui4NI","outputId":"6731fdee-23aa-4561-e84d-5da4dda20954","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.tree import export_graphviz\nimport graphviz\n\ndot_data = export_graphviz(\n    modelo,\n    out_file = None,\n    filled = True,\n    rounded = True,\n    feature_names = x.columns,\n    class_names = ['não', 'sim']\n)\ngrafico = graphviz.Source(dot_data)\ngrafico","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":599},"id":"GWSaM9a-jPbp","outputId":"d0f20f4e-c946-4c39-f906-15f2de5d9b3d","trusted":true},"execution_count":null,"outputs":[]}]}