{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30635,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Aula:","metadata":{"id":"qS1e7DkiEUeH"}},{"cell_type":"code","source":"\"\"\"\nAbaixo são criados três porcos e três cachorros;\nCada um deles é representado por três valores binários;\n\nCada um dos valores corresponde a esta propriedades, respectivamente:\n- Tem pelo longo?\n- Tem perna curta?\n- Faz au au?\n\"\"\"\nporco1 = [0, 1, 0]\nporco2 = [0, 1, 1]\nporco3 = [1, 1, 0]\n\ncachorro1 = [0, 1, 1]\ncachorro2 = [1, 0, 1]\ncachorro3 = [1, 1, 1]\n\n\"\"\"\nOs animais criados são colocados em um array, treino_x;\nO que eu quero definir o que os animais são vai para treino_y;\n0 para cachorro e 1 para porco.\n\"\"\"\ntreino_x = [porco1, porco2, porco3, cachorro1, cachorro2, cachorro3]\ntreino_y = [1, 1, 1, 0, 0, 0]","metadata":{"id":"iN35zFmNyYIc","execution":{"iopub.status.busy":"2024-01-10T23:12:23.413499Z","iopub.execute_input":"2024-01-10T23:12:23.414916Z","iopub.status.idle":"2024-01-10T23:12:23.452195Z","shell.execute_reply.started":"2024-01-10T23:12:23.414865Z","shell.execute_reply":"2024-01-10T23:12:23.451198Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"\"\"\"\nEsta biblioteca será utilizada para criar um modelo de Regressão Linear.\n\"\"\"\nfrom sklearn.svm import LinearSVC\n\nmodel = LinearSVC()\nmodel.fit(treino_x, treino_y)","metadata":{"id":"tcWrSPHkzaby","colab":{"base_uri":"https://localhost:8080/","height":75},"outputId":"11c23717-490a-4428-b4d0-19014cfd3491","execution":{"iopub.status.busy":"2024-01-10T23:12:25.676356Z","iopub.execute_input":"2024-01-10T23:12:25.676699Z","iopub.status.idle":"2024-01-10T23:12:27.287920Z","shell.execute_reply.started":"2024-01-10T23:12:25.676677Z","shell.execute_reply":"2024-01-10T23:12:27.286684Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"LinearSVC()","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearSVC()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearSVC</label><div class=\"sk-toggleable__content\"><pre>LinearSVC()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"\"\"\"\nCriei um animal misterioso e quero que o meu modelo analise o que ele é;\nSegundo o meu modelo, um animal com Pelo longo, perna curta e que faz auau é\ncachorro, o que faz sentido, já queeu alimentei meu modelo com um cachorro\nexatamente assim.\n\"\"\"\n\nanimal_misterioso = [1,1,1]\nprevisao = model.predict([animal_misterioso])[0]\n\nprint('O animal misterioso é um %s!!' % {\n    0: 'cachorro',\n    1: 'porco',\n}[previsao])","metadata":{"id":"YaUuFWOx0YZF","colab":{"base_uri":"https://localhost:8080/"},"outputId":"e715b02a-ff9a-4f8d-b462-3bfd34edcaf3","execution":{"iopub.status.busy":"2024-01-10T23:12:31.986253Z","iopub.execute_input":"2024-01-10T23:12:31.986588Z","iopub.status.idle":"2024-01-10T23:12:31.993969Z","shell.execute_reply.started":"2024-01-10T23:12:31.986566Z","shell.execute_reply":"2024-01-10T23:12:31.992509Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"O animal misterioso é um cachorro!!\n","output_type":"stream"}]},{"cell_type":"code","source":"\"\"\"\nAgora que meu modelo já está treinado, vou criar uma base de teste:\n- Pelo longo, perna curta, faz auau - é um cachorro;\n- Pelo longo, perna curta, não faz auau - é um porco;\n- Pelo curto, perna curta, faz auau - é um porco.\n\"\"\"\n\nmisterio1 = [1,1,1]\nmisterio2 = [1,1,0]\nmisterio3 = [0,1,1]\n\nteste_x = [misterio1, misterio2, misterio3]\nteste_y = [0, 1, 1]","metadata":{"id":"yJEFM8mx0jtR","execution":{"iopub.status.busy":"2024-01-10T23:12:36.361810Z","iopub.execute_input":"2024-01-10T23:12:36.362172Z","iopub.status.idle":"2024-01-10T23:12:36.367476Z","shell.execute_reply.started":"2024-01-10T23:12:36.362148Z","shell.execute_reply":"2024-01-10T23:12:36.366716Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"\"\"\"\nEstes foram os resultados:\n- Pelo longo, perna curta, faz auau - é um cachorro (CORRETO);\n- Pelo longo, perna curta, não faz auau - é um porco (CORRETO);\n- Pelo curto, perna curta, faz auau - é um porco (ERRADO!!!);\n\nO meu modelo definiu o último animal como cachorro;\nEu tenho um cachorro e um porco com as mesmas características, ele se confundiu!\n\"\"\"\n\nprevisoes = model.predict(teste_x)\nprint(previsoes)","metadata":{"id":"3xOA4L4e03GO","colab":{"base_uri":"https://localhost:8080/"},"outputId":"f4270687-8272-471b-9c05-07948bd79911","execution":{"iopub.status.busy":"2024-01-10T23:12:43.577194Z","iopub.execute_input":"2024-01-10T23:12:43.577544Z","iopub.status.idle":"2024-01-10T23:12:43.583245Z","shell.execute_reply.started":"2024-01-10T23:12:43.577517Z","shell.execute_reply":"2024-01-10T23:12:43.582439Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"[0 1 0]\n","output_type":"stream"}]},{"cell_type":"code","source":"\"\"\"\nAbaixo o cálculo da minha taxa de acerto: 66%;\nEu teste 3, acertei 2 e errei 1.\n\"\"\"\n\ncorretos = (previsoes == teste_y).sum()\ntotal = len(teste_x)\ntaxa_de_acerto = corretos / total\nprint(\"Taxa de acerto %.2f\" % (taxa_de_acerto * 100))","metadata":{"id":"cUaaDQol1b_D","colab":{"base_uri":"https://localhost:8080/"},"outputId":"11f7795a-5e9d-457e-da9c-6b486a6284dc","execution":{"iopub.status.busy":"2024-01-10T23:12:47.809300Z","iopub.execute_input":"2024-01-10T23:12:47.809683Z","iopub.status.idle":"2024-01-10T23:12:47.818106Z","shell.execute_reply.started":"2024-01-10T23:12:47.809654Z","shell.execute_reply":"2024-01-10T23:12:47.816122Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Taxa de acerto 66.67\n","output_type":"stream"}]},{"cell_type":"code","source":"\"\"\"\nMas eu não preciso ficar calculando isso na mão toda vez!\nO sklearn tem a função accuracy_score() que recebe o resultado e as previsões\nrealizadas, retornando o resultado em decimal.\n\"\"\"\n\nfrom sklearn.metrics import accuracy_score\n\ntaxa_de_acerto = accuracy_score(teste_y, previsoes)\nprint(\"Taxa de acerto %.2f\" % (taxa_de_acerto * 100))","metadata":{"id":"T6zhFhQa1c28","colab":{"base_uri":"https://localhost:8080/"},"outputId":"2959c67c-c934-4482-8d08-6f8ba89d9af1","execution":{"iopub.status.busy":"2024-01-10T23:12:50.985517Z","iopub.execute_input":"2024-01-10T23:12:50.985890Z","iopub.status.idle":"2024-01-10T23:12:50.992982Z","shell.execute_reply.started":"2024-01-10T23:12:50.985854Z","shell.execute_reply":"2024-01-10T23:12:50.992082Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"Taxa de acerto 66.67\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Treino para fixação:","metadata":{"id":"bVZeRR-mEMbu"}},{"cell_type":"code","source":"\"\"\"\nQuero fazer um modelo de predição que verifica se uma planta é um trevo de\nquatro folhas (1), um trevo de três folhas (2), ou se é uma flor (3), baseado\nnessas características, também binárias:\n- É verde? (Trevos de 3 ou 4 folhas)\n- Possui quatro pétalas? (Trevos de 4 folhas e algumas flores)\n- É agradável de ver? (Flores e alguns trevos de 4 folhas)\n- Dá sorte? (Quase sempre trevos de 4 folhas, às vezes flores)\n\nExistem alguns problemas aqui!\n- Um trevo de 3 folhas pode ser bonito;\n- Um trevo de 4 folhas morto e uma flor feia são muito parecidos;\n- Uma flor morta e um trevo de 3 folhas são muito parecidos;\nEsses erros devem derrubar a taxa de acerto.\n\"\"\"\ntrevo3_bonito = [1, 0, 1, 0]\ntrevo3_morto = [0, 0, 0, 0]\ntrevo3_normal = [1, 0, 0, 0]\n\ntrevo4_normal = [1, 1, 0, 1]\ntrevo4_morto = [0, 1, 0, 0]\ntrevo4_morto_sorte = [0, 1, 0, 1]\ntrevo4_bonito = [1, 1, 1, 1]\n\nflor_normal1 = [0, 1, 1, 0]\nflor_normal2 = [0, 0, 1, 0]\nflor_sorte1 = [0, 0, 1, 1]\nflor_sorte2 = [0, 1, 1, 1]\nflor_morta1 = [1, 1, 0, 0]\nflor_morta2 = [1, 0, 0, 0]\nflor_morta3 = [0, 0, 0, 0]\nflor_feia1 = [0, 0, 0, 0]\nflor_feia2 = [0, 1, 0, 0]\n\ntreino_x = [\n    trevo3_bonito,\n    trevo3_morto,\n    trevo3_normal,\n    trevo4_normal,\n    trevo4_morto,\n    trevo4_morto_sorte,\n    trevo4_bonito,\n    flor_normal1,\n    flor_normal2,\n    flor_sorte1,\n    flor_sorte2,\n    flor_morta1,\n    flor_morta2,\n    flor_morta3,\n    flor_feia1,\n    flor_feia2\n]\ntreino_y = [ 1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3 ]","metadata":{"id":"Z9wOaemi2fzE","execution":{"iopub.status.busy":"2024-01-10T23:13:01.881523Z","iopub.execute_input":"2024-01-10T23:13:01.881923Z","iopub.status.idle":"2024-01-10T23:13:01.891871Z","shell.execute_reply.started":"2024-01-10T23:13:01.881895Z","shell.execute_reply":"2024-01-10T23:13:01.890643Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"from sklearn.svm import LinearSVC\n\nmodel = LinearSVC()\nmodel.fit(treino_x, treino_y)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"PsrI1sJsJy_L","outputId":"b70b3b09-ce07-49a6-acd8-05f9f6d0f4b1","execution":{"iopub.status.busy":"2024-01-10T23:13:05.152468Z","iopub.execute_input":"2024-01-10T23:13:05.152842Z","iopub.status.idle":"2024-01-10T23:13:05.164733Z","shell.execute_reply.started":"2024-01-10T23:13:05.152812Z","shell.execute_reply":"2024-01-10T23:13:05.162998Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"LinearSVC()","text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearSVC()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearSVC</label><div class=\"sk-toggleable__content\"><pre>LinearSVC()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"\"\"\"\nHora de testar 2 de cada classe:\n\nTrevos (3 folhas):\n- Um trevo normal;\n- Um trevo morto;\n\nTrevos (4 folhas):\n- Um trevo morto que dá sorte;\n- Um trevo que dá sorte, mas é feio;\n\nFlores:\n- Uma flor que dá sorte;\n- Uma flor com 4 pétalas que dá sorte; <-- Estou achando que vai errar só aqui\n\nLembrando:\n1. É verde?\n2. Possui quatro pétalas?\n3. É agradável de ver?\n4. Dá sorte?\n\"\"\"\nteste_x = []\nteste_y = []\n\nteste_x.append([1, 0, 0, 0])\nteste_y.append(1)\nteste_x.append([0, 0, 0, 0])\nteste_y.append(1)\n\nteste_x.append([0, 1, 0, 1])\nteste_y.append(2)\nteste_x.append([1, 1, 0, 1])\nteste_y.append(2)\n\nteste_x.append([0, 0, 1, 1])\nteste_y.append(3)\nteste_x.append([0, 1, 1, 1])\nteste_y.append(3)","metadata":{"id":"RtiCEgHfKOlH","execution":{"iopub.status.busy":"2024-01-10T23:13:09.703659Z","iopub.execute_input":"2024-01-10T23:13:09.704005Z","iopub.status.idle":"2024-01-10T23:13:09.711077Z","shell.execute_reply.started":"2024-01-10T23:13:09.703983Z","shell.execute_reply":"2024-01-10T23:13:09.710017Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"\"\"\"\nE lá vamos nós...\n\nTrevos (3 folhas):\n- Um trevo normal (CORRETO);\n- Um trevo morto (ERROU, FALOU QUE É UMA FLOR);\n\nTrevos (4 folhas):\n- Um trevo morto que dá sorte (CORRETO);\n- Um trevo que dá sorte, mas é feio (CORRETO);\n\nFlores:\n- Uma flor que dá sorte (CORRETO);\n- Uma flor com 4 pétalas que dá sorte (CORRETO);\n\"\"\"\nprevisoes = model.predict(teste_x)\nprint(previsoes)","metadata":{"id":"IUuRYXocMts7","execution":{"iopub.status.busy":"2024-01-10T23:13:30.321339Z","iopub.execute_input":"2024-01-10T23:13:30.321768Z","iopub.status.idle":"2024-01-10T23:13:30.328696Z","shell.execute_reply.started":"2024-01-10T23:13:30.321740Z","shell.execute_reply":"2024-01-10T23:13:30.327613Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"[1 3 2 2 3 3]\n","output_type":"stream"}]},{"cell_type":"code","source":"\"\"\"\n83.3% - Nada mal\n\"\"\"\n\nfrom sklearn.metrics import accuracy_score\n\ntaxa_acerto = accuracy_score(teste_y, previsoes)\nprint(\"A taxa de acerto do modelo é de %.2f%%\" % (taxa_acerto * 100))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_0BfzzxgNL0U","outputId":"3a06c044-982e-4626-9a23-b12eb6e493a9","execution":{"iopub.status.busy":"2024-01-10T23:13:51.088524Z","iopub.execute_input":"2024-01-10T23:13:51.088922Z","iopub.status.idle":"2024-01-10T23:13:51.096226Z","shell.execute_reply.started":"2024-01-10T23:13:51.088892Z","shell.execute_reply":"2024-01-10T23:13:51.095040Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"A taxa de acerto do modelo é de 83.33%\n","output_type":"stream"}]}]}